<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/mvc
          http://www.springframework.org/schema/mvc/spring-mvc.xsd
        "
       >
   <!--激活@Required @Autowired JSR 250 's  @postConstruct @ PreDestroy  and @Resource等标注-->
    <!--作用是隐式的向Spring容器注册
                           AutowiredAnnotationBeanPostProcessor, @Autowired
                           CommonAnnotationBeanPostProcessor,@PersistenceContext
                           PersistenceAnnotationBeanPostProcessor,@Required
                           RequiredAnnotationBeanPostProcessor  @Resource、@ PostConstruct、@ PreDestroy
                           -->
    <context:annotation-config/>
    <!--
    <context:component-scan>標籤用途比我想像的還要實用。而且後來才知道，有了<context:component-scan>，
    另一個<context:annotation-config/>標籤根本可以移除掉，因為被包含進去了
    -->
    <!-- 扫描符合@Service @Repository的类 -->
    <context:component-scan base-package="com.yinrong.*">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
    </context:component-scan>
    <!--HandlerMaping,无需配置，SpringMVC 可以默认启动
    DefaultAnnotationHandlerMapping annotation-driven HandlerMapping
    -->
    <!--扩充注解驱动，可以将请求参数绑定到控制器参数-->
    <mvc:annotation-driven/>
    <!---处理静态资源,css,js,imgs-->
    <!--资源映射resource-->
    <mvc:resources mapping="/resources/**" location="/resources/"/>
    <!--配置ViewResolver,可以用多个ViewResolver,使用order属性排序。InternalResourceViewResolver放在最后-->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"/>
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"></entry>
                <entry key="xml" value="application/xml"></entry>
                <entry key="html" value="text/html"></entry>
            </map>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"></bean>
            </list>
        </property>
        <property name="ignoreAcceptHeader" value="true"></property>
    </bean>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name= "viewClass"value= "org.springframework.web.servlet.view.JstlView"/>
        <property name= "contentType" value= "text/html"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="20971500"></property>
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="resolveLazily" value="true"></property>

    </bean>
</beans>